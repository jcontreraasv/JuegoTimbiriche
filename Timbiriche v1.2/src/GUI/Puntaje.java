/**
 * Paquete GUI
 */
package GUI;

import objNegocio.*;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;

/**
 * Clase Puntaje.java que hereda de la interfaz ISala.java
 *
 * @author EQUIPO ARQUITECTURA INTEGRANTES: Jaime Sergio Efrain Jesus Ivan
 */
public class Puntaje extends javax.swing.JPanel implements ISala {

    /**
     * Definimos las instancias que utilizaremos, las cuales son una de Sala,
     * otra de la clase Panel y otra de CuadroJugador.
     */
    private Sala s;
    private List<javax.swing.JPanel> panelF;
    private List<CuadroJugador> panelesJgdrs;

    /**
     * Constructor de la clase el cual recibe una instancia de la clase Sala.
     * Inicializamos todas las instancias definidas anteriormente y agregamos
     * los paneles de cada jugador.
     *
     * @param s Instancia de la clase Sala.
     */
    public Puntaje(Sala s) {
        this.s = s;
        this.panelesJgdrs = new ArrayList<>();
        this.panelF = new ArrayList<>();
        initComponents();
        this.setPreferredSize(new Dimension(300, 400));

        this.panelF.add(panelJugador1);
        this.panelF.add(panelJugador2);
        this.panelF.add(panelJugador3);
        this.panelF.add(panelJugador4);

        for (int i = 0; i < this.panelF.size(); i++) {
            panelF.get(i).setVisible(false);
        }
        panelMarcador();
    }

    /**
     * Método de tipo void sincronizado el cual sirve para tener el puntaje de
     * cada uno de todos los jugadores actualizados en cada uno de los paneles.
     */
    private synchronized void panelMarcador() {
        List<Jugador> jugadores = this.s.getMarc().getJgdrs();
        for (int i = 0; i < jugadores.size(); i++) {
            panelF.get(i).removeAll();

            CuadroJugador pnlJugador = new CuadroJugador(jugadores.get(i));
            pnlJugador.setBorder(panelF.get(i).getBorder());
            if (jugadores.get(i).getJgdrColor() != null) {
                pnlJugador.setBackground(Color.decode(jugadores.get(i).getJgdrColor()));
            }
            panelF.get(i).add(pnlJugador);
            panelF.get(i).setVisible(true);
            panelesJgdrs.add(pnlJugador);

            pnlJugador.setVisible(true);
            pnlJugador.repaint();
        }
        this.repaint();
    }

    /**
     * Método de tipo void sincronizado el cual sirve para que en los paneles de
     * los jugadores, pueda aparecer el color de cada uno de los jugadores y
     * también del jugador líder.
     */
    public synchronized void coloresPref() {
        List<Jugador> jgdrs = this.s.getMarc().getJgdrs();
        Jugador jgdrLider = this.s.getMarc().getJgdrLider();

        int cntdrClr = 0;
        for (int i = 0; i < jgdrs.size(); i++) {
            if (!jgdrs.get(i).equals(jgdrLider)) {
                jgdrs.get(i).setJgdrColor(jgdrLider.getJgdrColorPref().getClrs().get(cntdrClr));
                cntdrClr = cntdrClr + 1;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJugador1 = new javax.swing.JPanel();
        panelJugador2 = new javax.swing.JPanel();
        panelJugador3 = new javax.swing.JPanel();
        panelJugador4 = new javax.swing.JPanel();

        panelJugador1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelJugador1.setMaximumSize(new java.awt.Dimension(280, 80));
        panelJugador1.setMinimumSize(new java.awt.Dimension(280, 80));
        panelJugador1.setPreferredSize(new java.awt.Dimension(280, 80));

        javax.swing.GroupLayout panelJugador1Layout = new javax.swing.GroupLayout(panelJugador1);
        panelJugador1.setLayout(panelJugador1Layout);
        panelJugador1Layout.setHorizontalGroup(
            panelJugador1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );
        panelJugador1Layout.setVerticalGroup(
            panelJugador1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        panelJugador2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelJugador2.setMaximumSize(new java.awt.Dimension(280, 80));
        panelJugador2.setMinimumSize(new java.awt.Dimension(280, 80));
        panelJugador2.setPreferredSize(new java.awt.Dimension(280, 80));

        javax.swing.GroupLayout panelJugador2Layout = new javax.swing.GroupLayout(panelJugador2);
        panelJugador2.setLayout(panelJugador2Layout);
        panelJugador2Layout.setHorizontalGroup(
            panelJugador2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );
        panelJugador2Layout.setVerticalGroup(
            panelJugador2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        panelJugador3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelJugador3.setMaximumSize(new java.awt.Dimension(280, 80));
        panelJugador3.setMinimumSize(new java.awt.Dimension(280, 80));
        panelJugador3.setPreferredSize(new java.awt.Dimension(280, 80));

        javax.swing.GroupLayout panelJugador3Layout = new javax.swing.GroupLayout(panelJugador3);
        panelJugador3.setLayout(panelJugador3Layout);
        panelJugador3Layout.setHorizontalGroup(
            panelJugador3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );
        panelJugador3Layout.setVerticalGroup(
            panelJugador3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        panelJugador4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelJugador4.setMaximumSize(new java.awt.Dimension(280, 80));
        panelJugador4.setMinimumSize(new java.awt.Dimension(280, 80));
        panelJugador4.setPreferredSize(new java.awt.Dimension(280, 80));

        javax.swing.GroupLayout panelJugador4Layout = new javax.swing.GroupLayout(panelJugador4);
        panelJugador4.setLayout(panelJugador4Layout);
        panelJugador4Layout.setHorizontalGroup(
            panelJugador4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );
        panelJugador4Layout.setVerticalGroup(
            panelJugador4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelJugador1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelJugador2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelJugador4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelJugador3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelJugador1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelJugador2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelJugador3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelJugador4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método de tipo void el cual actualiza los paneles de los jugadores.
     */
    @Override
    public void actualizaSala() {
        panelMarcador();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelJugador1;
    private javax.swing.JPanel panelJugador2;
    private javax.swing.JPanel panelJugador3;
    private javax.swing.JPanel panelJugador4;
    // End of variables declaration//GEN-END:variables
}
